{"version":3,"sources":["map/logo.png","map/loadingScreen.js","map/map.js","index.js"],"names":["module","exports","LoadingScreen","props","className","src","logo","alt","MapView","state","currentLatitude","currentLongitude","data","isLoaded","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","setState","fetch","then","res","json","result","error","this","Map","center","zoom","maxZoom","LayersControl","BaseLayer","name","TileLayer","url","attribution","checked","Overlay","points","longitudeExtractor","m","latitudeExtractor","intensityExtractor","parseFloat","gradient","0.4","0.8","1","max","FeatureGroup","map","cctv","Circle","key","cctvId","radius","color","peopleCount","Popup","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,uQCa5BC,MAVf,SAAuBC,GACrB,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,gBACb,yBAAKC,IAAKC,IAAMF,UAAU,OAAOG,IAAI,Y,ICsG9BC,E,kDAxFd,WAAYL,GAAQ,IAAD,8BAClB,cAAMA,IACDM,MAAQ,CACZC,gBAAiB,EACjBC,iBAAkB,EAClBC,KAAM,GACNC,UAAU,GANO,E,gEASE,IAAD,OACnBC,UAAUC,YAAYC,oBAAmB,SAACC,GACzCC,QAAQC,IAAI,gBAAiBF,EAASG,OAAOC,UAC7CH,QAAQC,IAAI,iBAAkBF,EAASG,OAAOE,WAC9C,EAAKC,SAAS,CACbb,gBAAiBO,EAASG,OAAOC,SACjCV,iBAAkBM,EAASG,OAAOE,eAGpCE,MAAM,iBACJC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MACA,SAACG,GACA,EAAKL,SAAS,CACbV,UAAU,EACVD,KAAMgB,EAAOhB,UAGf,SAACiB,GACAX,QAAQC,IAAIU,GACZ,EAAKN,SAAS,CACbV,UAAU,EACVgB,e,+BAOJ,OADAX,QAAQC,IAAIW,KAAKrB,MAAMG,MACfkB,KAAKrB,MAAMI,SAGlB,kBAACkB,EAAA,EAAD,CAAKC,OAAQ,CAAC,QAAS,SAAUC,KAAM,GAAIC,QAAS,IACnD,kBAACC,EAAA,EAAD,KACC,kBAACA,EAAA,EAAcC,UAAf,CAAyBC,KAAK,kBAC7B,kBAACC,EAAA,EAAD,CACCC,IAAI,qDACJC,YAAY,0GAGd,kBAACL,EAAA,EAAcC,UAAf,CAAyBC,KAAK,eAAeI,SAAO,GACnD,kBAACH,EAAA,EAAD,CACCC,IAAI,gEACJC,YAAY,kKAGd,kBAACL,EAAA,EAAcO,QAAf,CAAuBL,KAAK,WAC3B,kBAAC,IAAD,CACCM,OAAQb,KAAKrB,MAAMG,KACnBsB,QAAS,GACTU,mBAAoB,SAACC,GAAD,OAAOA,EAAC,WAC5BC,kBAAmB,SAACD,GAAD,OAAOA,EAAC,UAC3BE,mBAAoB,SAACF,GAAD,OAAOG,WAAWH,EAAC,cACvCI,SAAU,CAAEC,GAAK,OAAQC,GAAK,SAAUC,EAAK,OAC7CC,IAAK,KAGP,kBAAClB,EAAA,EAAcO,QAAf,CAAuBL,KAAK,SAASI,SAAO,GAC3C,kBAACa,EAAA,EAAD,KACExB,KAAKrB,MAAMG,KAAK2C,KAAI,SAACC,GAAD,OACpB,kBAACC,EAAA,EAAD,CACCC,IAAKF,EAAKG,OACV3B,OAAQ,CAACwB,EAAKnC,SAAUmC,EAAKlC,WAC7BsC,OAAQ,GACRC,OAvFSC,EAuFON,EAAKM,YAtFzBA,EAAc,GACV,OAEJA,EAAc,IAAMA,EAAc,GAC9B,SAEJA,EAAc,KAAOA,EAAc,GAC/B,SAED,QA+EC,kBAACC,EAAA,EAAD,KACC,+CAAqBP,EAAKM,eA1FpC,IAAkBA,SAqDZ,kBAAC,EAAD,CAAe1D,UAAU,gB,GAxCT4D,IAAMC,WChB5BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.5c57b0dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3a484a30.png\";","import React from 'react';\nimport './map.css';\nimport logo from './logo.png';\nfunction LoadingScreen(props) {\n  return (\n    <div className=\"loading\">\n      <div className=\"centered-div\">\n        <img src={logo} className=\"logo\" alt=\"logo\" />\n      </div>\n    </div>\n  );\n}\n\nexport default LoadingScreen;\n","/* eslint-disable react/jsx-no-target-blank */\nimport React from 'react';\nimport './map.css';\nimport { Map, Circle, Popup, TileLayer, LayersControl, FeatureGroup } from 'react-leaflet';\nimport HeatmapLayer from 'react-leaflet-heatmap-layer';\nimport LoadingScreen from './loadingScreen';\n\nfunction getColor(peopleCount) {\n\tif (peopleCount < 30) {\n\t\treturn 'blue';\n\t}\n\tif (peopleCount < 50 && peopleCount > 30) {\n\t\treturn 'yellow';\n\t}\n\tif (peopleCount < 100 && peopleCount > 50) {\n\t\treturn 'orange';\n\t}\n\treturn 'red';\n}\n\nclass MapView extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcurrentLatitude: 0,\n\t\t\tcurrentLongitude: 0,\n\t\t\tdata: [],\n\t\t\tisLoaded: false\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tnavigator.geolocation.getCurrentPosition((position) => {\n\t\t\tconsole.log('Latitude is :', position.coords.latitude);\n\t\t\tconsole.log('Longitude is :', position.coords.longitude);\n\t\t\tthis.setState({\n\t\t\t\tcurrentLatitude: position.coords.latitude,\n\t\t\t\tcurrentLongitude: position.coords.longitude\n\t\t\t});\n\t\t});\n\t\tfetch('/api/v1/count')\n\t\t\t.then((res) => res.json())\n\t\t\t.then(\n\t\t\t\t(result) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\tdata: result.data\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\terror\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t}\n\trender() {\n\t\tconsole.log(this.state.data);\n\t\treturn !this.state.isLoaded ? (\n      <LoadingScreen className=\"loading\" />\n    ) : (\n\t\t\t<Map center={[12.9721, 77.5933]} zoom={17} maxZoom={19}>\n\t\t\t\t<LayersControl>\n\t\t\t\t\t<LayersControl.BaseLayer name=\"Mapnik (Light)\">\n\t\t\t\t\t\t<TileLayer\n\t\t\t\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n\t\t\t\t\t\t\tattribution='&copy; CrowdDistance, <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</LayersControl.BaseLayer>\n\t\t\t\t\t<LayersControl.BaseLayer name=\"Carto (Dark)\" checked>\n\t\t\t\t\t\t<TileLayer\n\t\t\t\t\t\t\turl=\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png\"\n\t\t\t\t\t\t\tattribution='&copy; CrowdDistance, <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</LayersControl.BaseLayer>\n\t\t\t\t\t<LayersControl.Overlay name=\"Heatmap\">\n\t\t\t\t\t\t<HeatmapLayer\n\t\t\t\t\t\t\tpoints={this.state.data}\n\t\t\t\t\t\t\tmaxZoom={20}\n\t\t\t\t\t\t\tlongitudeExtractor={(m) => m['longitude']}\n\t\t\t\t\t\t\tlatitudeExtractor={(m) => m['latitude']}\n\t\t\t\t\t\t\tintensityExtractor={(m) => parseFloat(m['peopleCount'])}\n\t\t\t\t\t\t\tgradient={{ 0.4: 'blue', 0.8: 'orange', 1.0: 'red' }}\n\t\t\t\t\t\t\tmax={8.0}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</LayersControl.Overlay>\n\t\t\t\t\t<LayersControl.Overlay name=\"Circle\" checked>\n\t\t\t\t\t\t<FeatureGroup>\n\t\t\t\t\t\t\t{this.state.data.map((cctv) => (\n\t\t\t\t\t\t\t\t<Circle\n\t\t\t\t\t\t\t\t\tkey={cctv.cctvId}\n\t\t\t\t\t\t\t\t\tcenter={[cctv.latitude, cctv.longitude]}\n\t\t\t\t\t\t\t\t\tradius={15}\n\t\t\t\t\t\t\t\t\tcolor={getColor(cctv.peopleCount)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Popup>\n\t\t\t\t\t\t\t\t\t\t<span>People count: {cctv.peopleCount}</span>\n\t\t\t\t\t\t\t\t\t</Popup>\n\t\t\t\t\t\t\t\t</Circle>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</FeatureGroup>\n\t\t\t\t\t</LayersControl.Overlay>\n\t\t\t\t</LayersControl>\n\t\t\t</Map>\n\t\t);\n\t}\n}\n\nexport default MapView;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MapView from './map/map';\nReactDOM.render(\n  <React.StrictMode>\n    <MapView />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}